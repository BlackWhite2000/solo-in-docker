<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liumapp.solo.transporter.mapper.B3SoloCommentMapper">
  <resultMap id="BaseResultMap" type="com.liumapp.solo.transporter.domain.B3SoloComment">
    <id column="oId" jdbcType="VARCHAR" property="oId" />
    <result column="commentCreated" jdbcType="BIGINT" property="commentCreated" />
    <result column="commentName" jdbcType="VARCHAR" property="commentName" />
    <result column="commentOnId" jdbcType="VARCHAR" property="commentOnId" />
    <result column="commentOnType" jdbcType="VARCHAR" property="commentOnType" />
    <result column="commentSharpURL" jdbcType="VARCHAR" property="commentSharpURL" />
    <result column="commentURL" jdbcType="VARCHAR" property="commentURL" />
    <result column="commentOriginalCommentId" jdbcType="VARCHAR" property="commentOriginalCommentId" />
    <result column="commentOriginalCommentName" jdbcType="VARCHAR" property="commentOriginalCommentName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    <result column="commentContent" jdbcType="LONGVARCHAR" property="commentContent" />
    <result column="commentThumbnailURL" jdbcType="LONGVARCHAR" property="commentThumbnailURL" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    oId, commentCreated, commentName, commentOnId, commentOnType, commentSharpURL, commentURL, 
    commentOriginalCommentId, commentOriginalCommentName
  </sql>
  <sql id="Blob_Column_List">
    commentContent, commentThumbnailURL
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b3_solo_comment
    where oId = #{oId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from b3_solo_comment
    where oId = #{oId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample">
    delete from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    insert into b3_solo_comment (oId, commentCreated, commentName, 
      commentOnId, commentOnType, commentSharpURL, 
      commentURL, commentOriginalCommentId, commentOriginalCommentName, 
      commentContent, commentThumbnailURL
      )
    values (#{oId,jdbcType=VARCHAR}, #{commentCreated,jdbcType=BIGINT}, #{commentName,jdbcType=VARCHAR}, 
      #{commentOnId,jdbcType=VARCHAR}, #{commentOnType,jdbcType=VARCHAR}, #{commentSharpURL,jdbcType=VARCHAR}, 
      #{commentURL,jdbcType=VARCHAR}, #{commentOriginalCommentId,jdbcType=VARCHAR}, #{commentOriginalCommentName,jdbcType=VARCHAR}, 
      #{commentContent,jdbcType=LONGVARCHAR}, #{commentThumbnailURL,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    insert into b3_solo_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="oId != null">
        oId,
      </if>
      <if test="commentCreated != null">
        commentCreated,
      </if>
      <if test="commentName != null">
        commentName,
      </if>
      <if test="commentOnId != null">
        commentOnId,
      </if>
      <if test="commentOnType != null">
        commentOnType,
      </if>
      <if test="commentSharpURL != null">
        commentSharpURL,
      </if>
      <if test="commentURL != null">
        commentURL,
      </if>
      <if test="commentOriginalCommentId != null">
        commentOriginalCommentId,
      </if>
      <if test="commentOriginalCommentName != null">
        commentOriginalCommentName,
      </if>
      <if test="commentContent != null">
        commentContent,
      </if>
      <if test="commentThumbnailURL != null">
        commentThumbnailURL,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="oId != null">
        #{oId,jdbcType=VARCHAR},
      </if>
      <if test="commentCreated != null">
        #{commentCreated,jdbcType=BIGINT},
      </if>
      <if test="commentName != null">
        #{commentName,jdbcType=VARCHAR},
      </if>
      <if test="commentOnId != null">
        #{commentOnId,jdbcType=VARCHAR},
      </if>
      <if test="commentOnType != null">
        #{commentOnType,jdbcType=VARCHAR},
      </if>
      <if test="commentSharpURL != null">
        #{commentSharpURL,jdbcType=VARCHAR},
      </if>
      <if test="commentURL != null">
        #{commentURL,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentId != null">
        #{commentOriginalCommentId,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentName != null">
        #{commentOriginalCommentName,jdbcType=VARCHAR},
      </if>
      <if test="commentContent != null">
        #{commentContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="commentThumbnailURL != null">
        #{commentThumbnailURL,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample" resultType="java.lang.Long">
    select count(*) from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update b3_solo_comment
    <set>
      <if test="record.oId != null">
        oId = #{record.oId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentCreated != null">
        commentCreated = #{record.commentCreated,jdbcType=BIGINT},
      </if>
      <if test="record.commentName != null">
        commentName = #{record.commentName,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOnId != null">
        commentOnId = #{record.commentOnId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOnType != null">
        commentOnType = #{record.commentOnType,jdbcType=VARCHAR},
      </if>
      <if test="record.commentSharpURL != null">
        commentSharpURL = #{record.commentSharpURL,jdbcType=VARCHAR},
      </if>
      <if test="record.commentURL != null">
        commentURL = #{record.commentURL,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOriginalCommentId != null">
        commentOriginalCommentId = #{record.commentOriginalCommentId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOriginalCommentName != null">
        commentOriginalCommentName = #{record.commentOriginalCommentName,jdbcType=VARCHAR},
      </if>
      <if test="record.commentContent != null">
        commentContent = #{record.commentContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.commentThumbnailURL != null">
        commentThumbnailURL = #{record.commentThumbnailURL,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update b3_solo_comment
    set oId = #{record.oId,jdbcType=VARCHAR},
      commentCreated = #{record.commentCreated,jdbcType=BIGINT},
      commentName = #{record.commentName,jdbcType=VARCHAR},
      commentOnId = #{record.commentOnId,jdbcType=VARCHAR},
      commentOnType = #{record.commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{record.commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{record.commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{record.commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{record.commentOriginalCommentName,jdbcType=VARCHAR},
      commentContent = #{record.commentContent,jdbcType=LONGVARCHAR},
      commentThumbnailURL = #{record.commentThumbnailURL,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update b3_solo_comment
    set oId = #{record.oId,jdbcType=VARCHAR},
      commentCreated = #{record.commentCreated,jdbcType=BIGINT},
      commentName = #{record.commentName,jdbcType=VARCHAR},
      commentOnId = #{record.commentOnId,jdbcType=VARCHAR},
      commentOnType = #{record.commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{record.commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{record.commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{record.commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{record.commentOriginalCommentName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    update b3_solo_comment
    <set>
      <if test="commentCreated != null">
        commentCreated = #{commentCreated,jdbcType=BIGINT},
      </if>
      <if test="commentName != null">
        commentName = #{commentName,jdbcType=VARCHAR},
      </if>
      <if test="commentOnId != null">
        commentOnId = #{commentOnId,jdbcType=VARCHAR},
      </if>
      <if test="commentOnType != null">
        commentOnType = #{commentOnType,jdbcType=VARCHAR},
      </if>
      <if test="commentSharpURL != null">
        commentSharpURL = #{commentSharpURL,jdbcType=VARCHAR},
      </if>
      <if test="commentURL != null">
        commentURL = #{commentURL,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentId != null">
        commentOriginalCommentId = #{commentOriginalCommentId,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentName != null">
        commentOriginalCommentName = #{commentOriginalCommentName,jdbcType=VARCHAR},
      </if>
      <if test="commentContent != null">
        commentContent = #{commentContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="commentThumbnailURL != null">
        commentThumbnailURL = #{commentThumbnailURL,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where oId = #{oId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    update b3_solo_comment
    set commentCreated = #{commentCreated,jdbcType=BIGINT},
      commentName = #{commentName,jdbcType=VARCHAR},
      commentOnId = #{commentOnId,jdbcType=VARCHAR},
      commentOnType = #{commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{commentOriginalCommentName,jdbcType=VARCHAR},
      commentContent = #{commentContent,jdbcType=LONGVARCHAR},
      commentThumbnailURL = #{commentThumbnailURL,jdbcType=LONGVARCHAR}
    where oId = #{oId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liumapp.solo.transporter.domain.B3SoloComment">
    update b3_solo_comment
    set commentCreated = #{commentCreated,jdbcType=BIGINT},
      commentName = #{commentName,jdbcType=VARCHAR},
      commentOnId = #{commentOnId,jdbcType=VARCHAR},
      commentOnType = #{commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{commentOriginalCommentName,jdbcType=VARCHAR}
    where oId = #{oId,jdbcType=VARCHAR}
  </update>
  <resultMap id="BaseResultMap" type="com.liumapp.solo.transporter.domain.B3SoloComment">
    <id column="oId" jdbcType="VARCHAR" property="oId" />
    <result column="commentDate" jdbcType="TIMESTAMP" property="commentDate" />
    <result column="commentEmail" jdbcType="VARCHAR" property="commentEmail" />
    <result column="commentName" jdbcType="VARCHAR" property="commentName" />
    <result column="commentOnId" jdbcType="VARCHAR" property="commentOnId" />
    <result column="commentOnType" jdbcType="VARCHAR" property="commentOnType" />
    <result column="commentSharpURL" jdbcType="VARCHAR" property="commentSharpURL" />
    <result column="commentURL" jdbcType="VARCHAR" property="commentURL" />
    <result column="commentOriginalCommentId" jdbcType="VARCHAR" property="commentOriginalCommentId" />
    <result column="commentOriginalCommentName" jdbcType="VARCHAR" property="commentOriginalCommentName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    <result column="commentContent" jdbcType="LONGVARCHAR" property="commentContent" />
    <result column="commentThumbnailURL" jdbcType="LONGVARCHAR" property="commentThumbnailURL" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    oId, commentDate, commentEmail, commentName, commentOnId, commentOnType, commentSharpURL, 
    commentURL, commentOriginalCommentId, commentOriginalCommentName
  </sql>
  <sql id="Blob_Column_List">
    commentContent, commentThumbnailURL
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b3_solo_comment
    where oId = #{oId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from b3_solo_comment
    where oId = #{oId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample">
    delete from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    insert into b3_solo_comment (oId, commentDate, commentEmail, 
      commentName, commentOnId, commentOnType, 
      commentSharpURL, commentURL, commentOriginalCommentId, 
      commentOriginalCommentName, commentContent, 
      commentThumbnailURL)
    values (#{oId,jdbcType=VARCHAR}, #{commentDate,jdbcType=TIMESTAMP}, #{commentEmail,jdbcType=VARCHAR}, 
      #{commentName,jdbcType=VARCHAR}, #{commentOnId,jdbcType=VARCHAR}, #{commentOnType,jdbcType=VARCHAR}, 
      #{commentSharpURL,jdbcType=VARCHAR}, #{commentURL,jdbcType=VARCHAR}, #{commentOriginalCommentId,jdbcType=VARCHAR}, 
      #{commentOriginalCommentName,jdbcType=VARCHAR}, #{commentContent,jdbcType=LONGVARCHAR}, 
      #{commentThumbnailURL,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    insert into b3_solo_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="oId != null">
        oId,
      </if>
      <if test="commentDate != null">
        commentDate,
      </if>
      <if test="commentEmail != null">
        commentEmail,
      </if>
      <if test="commentName != null">
        commentName,
      </if>
      <if test="commentOnId != null">
        commentOnId,
      </if>
      <if test="commentOnType != null">
        commentOnType,
      </if>
      <if test="commentSharpURL != null">
        commentSharpURL,
      </if>
      <if test="commentURL != null">
        commentURL,
      </if>
      <if test="commentOriginalCommentId != null">
        commentOriginalCommentId,
      </if>
      <if test="commentOriginalCommentName != null">
        commentOriginalCommentName,
      </if>
      <if test="commentContent != null">
        commentContent,
      </if>
      <if test="commentThumbnailURL != null">
        commentThumbnailURL,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="oId != null">
        #{oId,jdbcType=VARCHAR},
      </if>
      <if test="commentDate != null">
        #{commentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="commentEmail != null">
        #{commentEmail,jdbcType=VARCHAR},
      </if>
      <if test="commentName != null">
        #{commentName,jdbcType=VARCHAR},
      </if>
      <if test="commentOnId != null">
        #{commentOnId,jdbcType=VARCHAR},
      </if>
      <if test="commentOnType != null">
        #{commentOnType,jdbcType=VARCHAR},
      </if>
      <if test="commentSharpURL != null">
        #{commentSharpURL,jdbcType=VARCHAR},
      </if>
      <if test="commentURL != null">
        #{commentURL,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentId != null">
        #{commentOriginalCommentId,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentName != null">
        #{commentOriginalCommentName,jdbcType=VARCHAR},
      </if>
      <if test="commentContent != null">
        #{commentContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="commentThumbnailURL != null">
        #{commentThumbnailURL,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentExample" resultType="java.lang.Long">
    select count(*) from b3_solo_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update b3_solo_comment
    <set>
      <if test="record.oId != null">
        oId = #{record.oId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentDate != null">
        commentDate = #{record.commentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commentEmail != null">
        commentEmail = #{record.commentEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.commentName != null">
        commentName = #{record.commentName,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOnId != null">
        commentOnId = #{record.commentOnId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOnType != null">
        commentOnType = #{record.commentOnType,jdbcType=VARCHAR},
      </if>
      <if test="record.commentSharpURL != null">
        commentSharpURL = #{record.commentSharpURL,jdbcType=VARCHAR},
      </if>
      <if test="record.commentURL != null">
        commentURL = #{record.commentURL,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOriginalCommentId != null">
        commentOriginalCommentId = #{record.commentOriginalCommentId,jdbcType=VARCHAR},
      </if>
      <if test="record.commentOriginalCommentName != null">
        commentOriginalCommentName = #{record.commentOriginalCommentName,jdbcType=VARCHAR},
      </if>
      <if test="record.commentContent != null">
        commentContent = #{record.commentContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.commentThumbnailURL != null">
        commentThumbnailURL = #{record.commentThumbnailURL,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update b3_solo_comment
    set oId = #{record.oId,jdbcType=VARCHAR},
      commentDate = #{record.commentDate,jdbcType=TIMESTAMP},
      commentEmail = #{record.commentEmail,jdbcType=VARCHAR},
      commentName = #{record.commentName,jdbcType=VARCHAR},
      commentOnId = #{record.commentOnId,jdbcType=VARCHAR},
      commentOnType = #{record.commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{record.commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{record.commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{record.commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{record.commentOriginalCommentName,jdbcType=VARCHAR},
      commentContent = #{record.commentContent,jdbcType=LONGVARCHAR},
      commentThumbnailURL = #{record.commentThumbnailURL,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update b3_solo_comment
    set oId = #{record.oId,jdbcType=VARCHAR},
      commentDate = #{record.commentDate,jdbcType=TIMESTAMP},
      commentEmail = #{record.commentEmail,jdbcType=VARCHAR},
      commentName = #{record.commentName,jdbcType=VARCHAR},
      commentOnId = #{record.commentOnId,jdbcType=VARCHAR},
      commentOnType = #{record.commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{record.commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{record.commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{record.commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{record.commentOriginalCommentName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    update b3_solo_comment
    <set>
      <if test="commentDate != null">
        commentDate = #{commentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="commentEmail != null">
        commentEmail = #{commentEmail,jdbcType=VARCHAR},
      </if>
      <if test="commentName != null">
        commentName = #{commentName,jdbcType=VARCHAR},
      </if>
      <if test="commentOnId != null">
        commentOnId = #{commentOnId,jdbcType=VARCHAR},
      </if>
      <if test="commentOnType != null">
        commentOnType = #{commentOnType,jdbcType=VARCHAR},
      </if>
      <if test="commentSharpURL != null">
        commentSharpURL = #{commentSharpURL,jdbcType=VARCHAR},
      </if>
      <if test="commentURL != null">
        commentURL = #{commentURL,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentId != null">
        commentOriginalCommentId = #{commentOriginalCommentId,jdbcType=VARCHAR},
      </if>
      <if test="commentOriginalCommentName != null">
        commentOriginalCommentName = #{commentOriginalCommentName,jdbcType=VARCHAR},
      </if>
      <if test="commentContent != null">
        commentContent = #{commentContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="commentThumbnailURL != null">
        commentThumbnailURL = #{commentThumbnailURL,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where oId = #{oId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.liumapp.solo.transporter.domain.B3SoloCommentWithBLOBs">
    update b3_solo_comment
    set commentDate = #{commentDate,jdbcType=TIMESTAMP},
      commentEmail = #{commentEmail,jdbcType=VARCHAR},
      commentName = #{commentName,jdbcType=VARCHAR},
      commentOnId = #{commentOnId,jdbcType=VARCHAR},
      commentOnType = #{commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{commentOriginalCommentName,jdbcType=VARCHAR},
      commentContent = #{commentContent,jdbcType=LONGVARCHAR},
      commentThumbnailURL = #{commentThumbnailURL,jdbcType=LONGVARCHAR}
    where oId = #{oId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liumapp.solo.transporter.domain.B3SoloComment">
    update b3_solo_comment
    set commentDate = #{commentDate,jdbcType=TIMESTAMP},
      commentEmail = #{commentEmail,jdbcType=VARCHAR},
      commentName = #{commentName,jdbcType=VARCHAR},
      commentOnId = #{commentOnId,jdbcType=VARCHAR},
      commentOnType = #{commentOnType,jdbcType=VARCHAR},
      commentSharpURL = #{commentSharpURL,jdbcType=VARCHAR},
      commentURL = #{commentURL,jdbcType=VARCHAR},
      commentOriginalCommentId = #{commentOriginalCommentId,jdbcType=VARCHAR},
      commentOriginalCommentName = #{commentOriginalCommentName,jdbcType=VARCHAR}
    where oId = #{oId,jdbcType=VARCHAR}
  </update>
</mapper>